# -*- coding: utf-8 -*-
"""startup profits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdiiLNjZiR1lz7cvSDYtmhVkst6w69rk

# startup prfits

# importing the libraries
"""

import pandas as pd
data = pd.read_csv("/content/start_ups.csv")
data.head(10)

"""# checking for missing data"""

missing = data.isnull().sum()
missing

print(data.describe())

"""# data splitting (F\L)"""

x = data.iloc[:, 0:4]
y = data.iloc[:, 4:5]

# import modules
import matplotlib.pyplot as plt
import seaborn as sb

print(x.corr())
  
# plotting correlation heatmap
dataplot = sb.heatmap(x.corr(), cmap="YlGnBu", annot=True)
plt.show()

y

x = pd.get_dummies(x, drop_first = True)

x

"""# Data scaling 
scale for ( x and y )
"""

from sklearn.preprocessing import MinMaxScaler
x_scaler = MinMaxScaler()
y_scaler = MinMaxScaler()

x = x_scaler.fit_transform(x)
y = y_scaler.fit_transform(y)

"""# save the scaler"""

import joblib
xscaler_filename = "Xscaler.save"
yscaler_filename = "yscaler.save"
joblib.dump(x_scaler, xscaler_filename) 
joblib.dump(y_scaler, yscaler_filename)

"""# splitting (train test split)"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

"""# Modeling"""

from sklearn.linear_model import LinearRegression

model1 = LinearRegression()
model1.fit(x_train, y_train)

"""# extracting the weights"""

import pickle
pickle.dump(model1, open('startup_weights.sav', 'wb'))

"""# model evaluation"""

print(model1.score(x_test, y_test))

print(model1.score(x_train, y_train))

"""#knn"""

from sklearn.neighbors import KNeighborsRegressor

model2 = KNeighborsRegressor(n_neighbors=3)
model2.fit(x_train, y_train)

model2.score(x_train, y_train)

model2.score(x_test, y_test)

"""# random forset"""

from sklearn.ensemble import RandomForestRegressor
model3 = RandomForestRegressor()
model3.fit(x_train, y_train)

model3.score(x_train, y_train)
model3.score(x_test, y_test)

model3.score(x_train, y_train)